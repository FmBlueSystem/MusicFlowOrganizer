[tool.poetry]
name = "musicflow-organizer"
version = "1.0.0"
description = "Professional music library organizer with DJ playlist generation"
authors = ["Claude Code"]
license = "MIT"
readme = "README.md"
packages = [
    { include = "src" },
]

[tool.poetry.dependencies]
python = "^3.11"
PySide6 = "^6.5.0"
mutagen = "^1.46.0"
requests = "^2.31.0"
aiohttp = "^3.9.0"
tqdm = "^4.65.0"
sqlalchemy = "^2.0.0"
redis = "^5.0.0"
openai = "^1.0.0"
python-dotenv = "^1.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.3.0"
pytest-asyncio = "^0.21.0"
black = "^23.3.0"
flake8 = "^6.0.0"
mypy = "^1.3.0"

[tool.poetry.scripts]
musicflow = "src.ui.main_window:main"
djflow = "djflow:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["src"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "E501", "W503", "D100", "D101", "D102", "D103"]
exclude = [".git", "__pycache__", "build", "dist", ".venv"]
per-file-ignores = [
    "__init__.py:F401",
    "test_*.py:D100,D101,D102,D103"
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
strict_optional = false
show_error_codes = true
exclude = ["build", "dist", ".venv"]

[tool.bandit]
exclude_dirs = ["tests", "test_*.py"]
skips = ["B101", "B601"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError"
]